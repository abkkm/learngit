-----------------------
RegExp					|
-----------------------
	# 正则表达式
	# 构造函数
		RegExp(regStr,flag)
	# 创建
		var re = new RegExp("\\w+",'i');
		var re = /\w+/i;
		
		* 当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。
	
	# 实例方法
		exec();
			* 检测指定的字符串,返回一个匹配对象
			* 如果字符串有多个匹配对象,可以多次执行,直到返回 null
		
		test();
			* 检测指定的字符串是否有一个或者多个符合正则表达,返回 true/false
		
	
	# 实例属性
		flags
			* 返回设置的flag
		
		sticky
			* sticky属性,表示是否设置了y修饰符
		
		dotAll 
			* 返回一个布尔值,表示该正则表达式是否处在dotAll模式
		

	

	# flags(抄自python笔记)

		re.I	使匹配对大小写不敏感
		re.L	做本地化识别(locale-aware)匹配
		re.M	多行匹配，影响 ^ 和 $
		re.S	使 . 匹配包括换行在内的所有字符(全文匹配)
		re.U	根据Unicode字符集解析字符,这个标志影响 \w, \W, \b, \B.
		re.X	该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解
					* 这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释